{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ComposeViews ComposeViews \u5404\u79cd\u81ea\u5b9a\u4e49Compose\u7ec4\u4ef6 jatpack(jb) compose views, in to Android,Web,Desktop,Ios: ComposePager, Banner, BannerIndicator, ImageBanner, RefreshLayout, FlowLayout, GoodTextField, PasswordTextField, MenuFloatingActionButton, PullToRefresh, VerticalRefreshableLayout, ChainScrollableComponent, ScrollableAppBar, SwipeToDismiss and more","title":"Home"},{"location":"#welcome-to-composeviews","text":"","title":"Welcome to ComposeViews"},{"location":"usage/","text":"Step 1.Root dir, build.gradle.kts add: buildscript { repositories { maven ( \"https://jitpack.io\" ) //this ... } } allprojects { repositories { maven ( \"https://jitpack.io\" ) //this ... } } Step 2.Your app dir, build.gradle.kts add: version = dependencies { ... implementation ( \"com.github.ltttttttttttt:ComposeViews: $ version \" ) //this, such as 1.2.5 }","title":"Usage"},{"location":"components/ChainScrollableComponent/","text":"ChainScrollableComponent Preview Usage /** * Chain scrollable component * @param minScrollPosition Minimum scroll position * @param maxScrollPosition Maximum scroll position * @param chainContent Content of chain * @param modifier * @param onScrollStop Callback of scroll stop event * @param composePosition Set the position of the top bar layout * @param chainMode Chain mode * @param content Content of compose */ @Composable fun ChainScrollableComponent () /** * Scalable top navigation bar * @param title Title of top bar * @param background Background of top bar * @param modifier * @param onScrollStop Callback of scroll stop event * @param minScrollPosition Minimum scroll position * @param maxScrollPosition Maximum scroll position * @param navigationIcon Icon of top bar * @param composePosition Set the position of the top bar layout * @param chainMode Chain mode * @param content Content of compose */ @Composable fun ScrollableAppBar () /** * Swipe to delete controls * @param minScrollPosition Minimum scroll position * @param maxScrollPosition Maximum scroll position * @param backgroundContent Content of background * @param modifier * @param contentIsMove Does content follow * @param content Content of compose */ @Composable fun SwipeToDismiss ()","title":"ChainScrollableComponent"},{"location":"components/ChainScrollableComponent/#chainscrollablecomponent","text":"","title":"ChainScrollableComponent"},{"location":"components/ChainScrollableComponent/#preview","text":"","title":"Preview"},{"location":"components/ChainScrollableComponent/#usage","text":"/** * Chain scrollable component * @param minScrollPosition Minimum scroll position * @param maxScrollPosition Maximum scroll position * @param chainContent Content of chain * @param modifier * @param onScrollStop Callback of scroll stop event * @param composePosition Set the position of the top bar layout * @param chainMode Chain mode * @param content Content of compose */ @Composable fun ChainScrollableComponent () /** * Scalable top navigation bar * @param title Title of top bar * @param background Background of top bar * @param modifier * @param onScrollStop Callback of scroll stop event * @param minScrollPosition Minimum scroll position * @param maxScrollPosition Maximum scroll position * @param navigationIcon Icon of top bar * @param composePosition Set the position of the top bar layout * @param chainMode Chain mode * @param content Content of compose */ @Composable fun ScrollableAppBar () /** * Swipe to delete controls * @param minScrollPosition Minimum scroll position * @param maxScrollPosition Maximum scroll position * @param backgroundContent Content of background * @param modifier * @param contentIsMove Does content follow * @param content Content of compose */ @Composable fun SwipeToDismiss ()","title":"Usage"},{"location":"components/FlowLayout/","text":"FlowLayout Preview Usage /** * Linear layout with word wrapping * @param modifier * @param orientation Direction of arrangement * @param horizontalAlignment Alignment of horizontal * @param verticalAlignment Alignment of vertical * @param horizontalMargin Margin of horizontal * @param verticalMargin Margin of vertical * @param maxLines How many lines can be placed * @param content Content of compose */ @Composable fun FlowLayout () /** * [FlowLayout] that can automatically determine the selected state */ @Composable fun LabelsFlowLayout ()","title":"FlowLayout"},{"location":"components/FlowLayout/#flowlayout","text":"","title":"FlowLayout"},{"location":"components/FlowLayout/#preview","text":"","title":"Preview"},{"location":"components/FlowLayout/#usage","text":"/** * Linear layout with word wrapping * @param modifier * @param orientation Direction of arrangement * @param horizontalAlignment Alignment of horizontal * @param verticalAlignment Alignment of vertical * @param horizontalMargin Margin of horizontal * @param verticalMargin Margin of vertical * @param maxLines How many lines can be placed * @param content Content of compose */ @Composable fun FlowLayout () /** * [FlowLayout] that can automatically determine the selected state */ @Composable fun LabelsFlowLayout ()","title":"Usage"},{"location":"components/GoodTextField/","text":"GoodTextField and PasswordTextField Preview Usage /** * More convenient and easy to use the [TextField] * @param value Text of the [TextField] * @param onValueChange Text change of the [TextField] * @param modifier * @param hint Content of the [TextField] with if value is Empty * @param maxLines How many lines of text can be displayed * @param fontSize Font size of text and hint * @param fontColor Color of text * @param maxLength How many texts can be displayed at most * @param contentAlignment Text and hint to the way * @param leading Components displayed on the start * @param trailing Components displayed on the end * @param background The background * @param horizontalPadding Horizontal inner spacing * @param enabled Is it possible to enter * @param readOnly Read-only * @param textStyle The [TextStyle] * @param keyboardOptions Reference the [BasicTextField] * @param keyboardActions Reference the [BasicTextField] * @param visualTransformation Reference the [BasicTextField] * @param onTextLayout Reference the [BasicTextField] * @param interactionSource Reference the [BasicTextField] * @param cursorBrush Reference the [BasicTextField] */ @Composable fun GoodTextField () /** * More convenient and easy to use the [TextField], for entering passwords * Api is almost the same as the [GoodTextField] */ @Composable fun PasswordTextField ()","title":"GoodTextField and PasswordTextField"},{"location":"components/GoodTextField/#goodtextfield-and-passwordtextfield","text":"","title":"GoodTextField and PasswordTextField"},{"location":"components/GoodTextField/#preview","text":"","title":"Preview"},{"location":"components/GoodTextField/#usage","text":"/** * More convenient and easy to use the [TextField] * @param value Text of the [TextField] * @param onValueChange Text change of the [TextField] * @param modifier * @param hint Content of the [TextField] with if value is Empty * @param maxLines How many lines of text can be displayed * @param fontSize Font size of text and hint * @param fontColor Color of text * @param maxLength How many texts can be displayed at most * @param contentAlignment Text and hint to the way * @param leading Components displayed on the start * @param trailing Components displayed on the end * @param background The background * @param horizontalPadding Horizontal inner spacing * @param enabled Is it possible to enter * @param readOnly Read-only * @param textStyle The [TextStyle] * @param keyboardOptions Reference the [BasicTextField] * @param keyboardActions Reference the [BasicTextField] * @param visualTransformation Reference the [BasicTextField] * @param onTextLayout Reference the [BasicTextField] * @param interactionSource Reference the [BasicTextField] * @param cursorBrush Reference the [BasicTextField] */ @Composable fun GoodTextField () /** * More convenient and easy to use the [TextField], for entering passwords * Api is almost the same as the [GoodTextField] */ @Composable fun PasswordTextField ()","title":"Usage"},{"location":"components/ImageBanner/","text":"ImageBanner Usage /** * [Banner] showing images * @param imageSize Number of images * @param imageContent Content of the images * @param indicatorItem The indicator, if null, do not display indicator * @param selectIndicatorItem The indicator, if null, do not display indicator * @param modifier * @param bannerState Banner's state * @param orientation Orientation of indicators * @param autoScroll Whether to scroll automatically * @param autoScrollTime Auto scroll interval */ @Composable fun ImageBanner ()","title":"ImageBanner"},{"location":"components/ImageBanner/#imagebanner","text":"","title":"ImageBanner"},{"location":"components/ImageBanner/#usage","text":"/** * [Banner] showing images * @param imageSize Number of images * @param imageContent Content of the images * @param indicatorItem The indicator, if null, do not display indicator * @param selectIndicatorItem The indicator, if null, do not display indicator * @param modifier * @param bannerState Banner's state * @param orientation Orientation of indicators * @param autoScroll Whether to scroll automatically * @param autoScrollTime Auto scroll interval */ @Composable fun ImageBanner ()","title":"Usage"},{"location":"components/MenuFloatingActionButton/","text":"MenuFloatingActionButton Preview Usage /** * Floating action button * @param icon Menu icon * @param label Menu text * @param srcIconColor Icon color * @param labelTextColor Label text color * @param labelBackgroundColor Background color of label text * @param fabBackgroundColor Background color of floating action button */ @Composable fun MenuFloatingActionButton ()","title":"MenuFloatingActionButton"},{"location":"components/MenuFloatingActionButton/#menufloatingactionbutton","text":"","title":"MenuFloatingActionButton"},{"location":"components/MenuFloatingActionButton/#preview","text":"","title":"Preview"},{"location":"components/MenuFloatingActionButton/#usage","text":"/** * Floating action button * @param icon Menu icon * @param label Menu text * @param srcIconColor Icon color * @param labelTextColor Label text color * @param labelBackgroundColor Background color of label text * @param fabBackgroundColor Background color of floating action button */ @Composable fun MenuFloatingActionButton ()","title":"Usage"},{"location":"components/More/","text":"More Preview Usage /** * Button without click effect */ @Composable fun ButtonWithNotRipple () /** * Star bar */ @Composable fun StarBar () /** * Progress bar */ @Composable fun BasicsProgressBar ()","title":"More"},{"location":"components/More/#more","text":"","title":"More"},{"location":"components/More/#preview","text":"","title":"Preview"},{"location":"components/More/#usage","text":"/** * Button without click effect */ @Composable fun ButtonWithNotRipple () /** * Star bar */ @Composable fun StarBar () /** * Progress bar */ @Composable fun BasicsProgressBar ()","title":"Usage"},{"location":"components/RefreshLayout/","text":"RefreshLayout Preview Usage RefreshLayout /** * The refreshed container can be dragged in any direction * @param refreshContent Refreshed content area * @param refreshLayoutState State of the [RefreshLayout] * @param modifier * @param refreshContentThreshold Refresh threshold for layout dragging * @param composePosition Set where the refreshed layout is located * @param contentIsMove Whether the content component moves with it on refresh * @param dragEfficiency The 'efficiency' of dragging * @param isSupportCanNotScrollCompose Whether to support non-scrollable components * @param userEnable Whether the user can drag * @param content Content of compose */ @Composable fun RefreshLayout () PullToRefresh /** * Pull down to refresh * @param refreshLayoutState State of the [RefreshLayout] * @param modifier * @param refreshContent Refreshed content area * @param content Content of compose */ @Composable fun PullToRefresh () VerticalRefreshableLayout /** * Pull down and up refresh components * @param topRefreshLayoutState State of the top of the [RefreshLayout] * @param bottomRefreshLayoutState State of the bottom of the [RefreshLayout] * @param modifier * @param topRefreshContent Refreshed content area of top * @param bottomIsLoadFinish Bottom is it loaded * @param bottomRefreshContent Refreshed content area of bottom * @param content Content of compose */ @Composable fun VerticalRefreshableLayout ()","title":"RefreshLayout"},{"location":"components/RefreshLayout/#refreshlayout","text":"","title":"RefreshLayout"},{"location":"components/RefreshLayout/#preview","text":"","title":"Preview"},{"location":"components/RefreshLayout/#usage","text":"","title":"Usage"},{"location":"components/RefreshLayout/#refreshlayout_1","text":"/** * The refreshed container can be dragged in any direction * @param refreshContent Refreshed content area * @param refreshLayoutState State of the [RefreshLayout] * @param modifier * @param refreshContentThreshold Refresh threshold for layout dragging * @param composePosition Set where the refreshed layout is located * @param contentIsMove Whether the content component moves with it on refresh * @param dragEfficiency The 'efficiency' of dragging * @param isSupportCanNotScrollCompose Whether to support non-scrollable components * @param userEnable Whether the user can drag * @param content Content of compose */ @Composable fun RefreshLayout ()","title":"RefreshLayout"},{"location":"components/RefreshLayout/#pulltorefresh","text":"/** * Pull down to refresh * @param refreshLayoutState State of the [RefreshLayout] * @param modifier * @param refreshContent Refreshed content area * @param content Content of compose */ @Composable fun PullToRefresh ()","title":"PullToRefresh"},{"location":"components/RefreshLayout/#verticalrefreshablelayout","text":"/** * Pull down and up refresh components * @param topRefreshLayoutState State of the top of the [RefreshLayout] * @param bottomRefreshLayoutState State of the bottom of the [RefreshLayout] * @param modifier * @param topRefreshContent Refreshed content area of top * @param bottomIsLoadFinish Bottom is it loaded * @param bottomRefreshContent Refreshed content area of bottom * @param content Content of compose */ @Composable fun VerticalRefreshableLayout ()","title":"VerticalRefreshableLayout"},{"location":"components/banner/","text":"Banner Usage /** * [ComposePager] that can auto scroll * @param pageCount Sum page count * @param modifier * @param bannerState Banner's state * @param orientation Scroll orientation * @param userEnable Whether the user can scroll * @param autoScroll Whether to scroll automatically * @param autoScrollTime Auto scroll interval * @param content Content of compose */ @Composable fun Banner ()","title":"Banner"},{"location":"components/banner/#banner","text":"","title":"Banner"},{"location":"components/banner/#usage","text":"/** * [ComposePager] that can auto scroll * @param pageCount Sum page count * @param modifier * @param bannerState Banner's state * @param orientation Scroll orientation * @param userEnable Whether the user can scroll * @param autoScroll Whether to scroll automatically * @param autoScrollTime Auto scroll interval * @param content Content of compose */ @Composable fun Banner ()","title":"Usage"},{"location":"components/composepager/","text":"ComposePager Preview Usage /** * Equivalent to the ViewPager in android * @param pageCount Sum page count * @param modifier * @param composePagerState ComposePager's state * @param orientation Scroll orientation * @param userEnable Whether the user can scroll * @param pageCache The number of pagers cached on the left and right sides * @param scrollableInteractionSource Scroll state monitor * @param content Content of compose */ @Composable fun ComposePager ()","title":"ComposePager"},{"location":"components/composepager/#composepager","text":"","title":"ComposePager"},{"location":"components/composepager/#preview","text":"","title":"Preview"},{"location":"components/composepager/#usage","text":"/** * Equivalent to the ViewPager in android * @param pageCount Sum page count * @param modifier * @param composePagerState ComposePager's state * @param orientation Scroll orientation * @param userEnable Whether the user can scroll * @param pageCache The number of pagers cached on the left and right sides * @param scrollableInteractionSource Scroll state monitor * @param content Content of compose */ @Composable fun ComposePager ()","title":"Usage"},{"location":"components/pagerindicator/","text":"PagerIndicator Preview Usage /** * Indicator for pager * @param size Number of indicator * @param offsetPercentWithSelect The offset percentage of the selected indicator * @param selectIndex The index of selected indicator * @param indicatorItem The indicator * @param selectIndicatorItem The selected indicator * @param modifier * @param margin Spacing between indicators * @param orientation Orientation of indicators * @param userCanScroll Whether the user can scroll */ @Composable fun PagerIndicator () /** * Text indicator for pager * @param texts The text list * @param offsetPercentWithSelect The offset percentage of the selected indicator * @param selectIndex The index of selected indicator * @param fontSize Font size of the text indicator * @param selectFontSize Font size of the selected text indicator * @param textColor Font color of the text indicator * @param selectTextColor Font color of the selected text indicator * @param selectIndicatorColor Color of the indicator * @param onIndicatorClick Click event of the text indicator * @param modifier * @param margin Spacing between the text indicators * @param userCanScroll Whether the user can scroll */ @Composable fun TextPagerIndicator ()","title":"PagerIndicator"},{"location":"components/pagerindicator/#pagerindicator","text":"","title":"PagerIndicator"},{"location":"components/pagerindicator/#preview","text":"","title":"Preview"},{"location":"components/pagerindicator/#usage","text":"/** * Indicator for pager * @param size Number of indicator * @param offsetPercentWithSelect The offset percentage of the selected indicator * @param selectIndex The index of selected indicator * @param indicatorItem The indicator * @param selectIndicatorItem The selected indicator * @param modifier * @param margin Spacing between indicators * @param orientation Orientation of indicators * @param userCanScroll Whether the user can scroll */ @Composable fun PagerIndicator () /** * Text indicator for pager * @param texts The text list * @param offsetPercentWithSelect The offset percentage of the selected indicator * @param selectIndex The index of selected indicator * @param fontSize Font size of the text indicator * @param selectFontSize Font size of the selected text indicator * @param textColor Font color of the text indicator * @param selectTextColor Font color of the selected text indicator * @param selectIndicatorColor Color of the indicator * @param onIndicatorClick Click event of the text indicator * @param modifier * @param margin Spacing between the text indicators * @param userCanScroll Whether the user can scroll */ @Composable fun TextPagerIndicator ()","title":"Usage"}]}